Big O Notation:-
****************

Motivate the need for something like big O Notation
-----------------------------------------------------
->write a function that accept a string input 
 and return a reversed copy.(we can give the best solution)

->huge data we need to use effeciant 
algoritham that time it's requird


Method 1-
const addUpTo = (n) => {
    let total =0 ;
    for(let i = 1; i <=n; i++){ // 1+2+3+4 =10
        total += i;
    }
    return total;
}

Method 2-
const addUpTo = (n)=>{
    return n*(n+1)/2;
}
console.log(addUpTo(4));

which one is better?

*faster
*Less memory intensive
*More readable

The Problem with time :-
--------------------------
*Diffrent machine will record diffrent time
*the same machine will record diffrent times
*For fast algorthms, speed measurement may not be precise enough


If not time, then what to do?

*Rather than counting the seconds, 
which are so veriable...

*Let's count the number of simple operations 
the computer has to perform


https://rithmschool.github.io/function-timer-demo/

Introducing Big O
******************

Big O Notation is a way to formalize fuzzy counting

it allows us to talk formally about how 
the runtime of an algorithm grow as the input grow

Definition 
-------------

we say that an algortham is o(f(n)) if the number 
of simple opertaions the computer has to do is eventually 
less than a constant times f(n), as n increases


*f(n) could be linear (f(n)=n) addUpToFirst.js
*f(n) could be quadratic (f(n)=n^2) printAllPairs.js
*f(n) could be constant (f(n)=1) addUpToSecond.js
* f(n) could be something entirely different

Another Example:- O(n)
function countUpAndDown(n) {
  console.log("Going up!");
  for (let i = 0; i < n; i++) {
    console.log(i);
  }
  console.log("At the top!\nGoing down...");
  for (let j = n - 1; j >= 0; j--) {
    console.log(j);
  }
  console.log("Back down. Bye!");
  }


Another Example 2:-  O(n) operations inside of an O(n) operation
  
function printAllPairs(n) {
  for (var i = 0; i < n; i++) {
    for (var j = 0; j < n; j++) {
      console.log(i, j);
    }
  }
}

O(n^2)

Simplify Big O Expressions:-
--------------------------

->when determining the time complexity of an algoritham 
  there are some helpful rule of thumbs for big O Expressions.

->These rules of thumb are consequences of the definition of big O natation.


Big O Shorthands:-
----------------

1. Arithmetic operations are constant 
2. variable assignment is constant
3. Accesing element in an array (by index or object (by key) is constant).
4. in a loop, the complexity is the length of the loop times the complexity of whatever happens inside of the loop


Space complexity
---------------
->So far, We 've been focusing on time complexity: How can we analyze the runtime of an algortham as the size of the input increases?

->We can also use big O notation to analyze space complexity: How much addition memeory do we need to allcate in order to run the code in our algoritham?

Space complexity in JS
----------------------
->Most primitive are constant space
->string requird O(n) space (where n is the string length)
->Referance type are generally O(n), where n is the length (for array) or the number of key (for object)

logarithms:-
-----------
->it is encountered some of the most common complexities: O(1), O(n), O(n^2)

->sometime big O Expressions involve more complex mathematical Expressions

->One that appears more often than you might like is the logarithms

->log2(value) = exponent ---> 2^exponent = value

->The logaritham of a number roughly measures the 
  number of times you can divide that number by 2 
  before you get a value less than or equal to one.



