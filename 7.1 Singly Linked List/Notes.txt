What is a Linked list?

->A data structure that contains a head, tail and 
  length property.

->Linked list consist of nodes, and each node has 
 a value and a pointer to another node or null.

(insertion, deletion, traversal, and modification.)

List :-

Do not have indexes.
Connected via nodes with a next pointer.
Random access is not allowed.

Arrays :-

Indexed in order.
Insertion and deletion can be expensive.
can quickly be accessed at a specific index.

Pushing pseudocode:-
*************
->This function should accept a value
->create a new node using the value passed to the function
->if there is no head property on the list, 
  set the  head and tail to be the newly created node.
->otherwise set the next property on the tail to be 
  the new node and set the tail property on the 
  list to be the newly created node.
->Increment the length by one
->Return the linked list

SingleLinkedList.js

Pop pseudocode:-(Removing a Node from the end of the Linked List)
****************
->if there are no node in the list, return undefine 
->Loop through the list until you reach the tail
->Set the next property of the 2nd to last node to be null
->Set the tail to be the 2nd to last node
->Decrement the length of the list by 1
->Return the value of the node removed

SingleLinkedList.js

Shifting pseudocode :-(Removing a new node from the beginning of the linked List)
*************
->if there are no nodes, return undefine.
->store the current head property in a variable.
->Set the haed property to be the current head's next property.
->Decrement the length by 1
->Return the value of the node removed

SingleLinkedList.js

Shifting pseudocode :-(Adding a new node from the beginning of the linked List)
*******************
->This function should accept a value.
->Create a new node using the value passed to 
  the function.
->if there is no head property on the list, 
  set the head and tail to be the newly created node.
->otherwise set the newly created node's next 
  property to be the current head property on the list. 
->set the head property on the list to be that 
  newly created node.
->Increment the length by 1
->Return the linked list

SingleLinkedList.js

Get pseudocode :-(Retrieving a node by it's position in the Linked List)
*********************
->This function should accept an index
->if the index is less than zero or greater than 
  or equal to the length of the list, return null.
->Loop through the list until you reach the index 
  and return the node at that specific index.

SingleLinkedList.js

Set(modify) pseudocode :-(Changing the value of a node based on it's position in the Linked List)
*****************
->This function should accept the value and index.
->use your get function to find the specific node.
->if the node is not found, return false.
->if the node is found. set the value of that node 
  to be the value passed to the function and return true.

SingleLinkedList.js

Insertion pseudocode:- (Adding a node to the linked list at a specific position)
***********************
->if the index is less than zero or greater than 
  the length, return false
->if the index is the same as the length, 
  push a new node to the end of the list
->if the index is 0, unshift a new node to 
  the start of the list
->Otherwise, using the get method, 
  access the node at the index -1
->Set the next property on that node to be the 
  new node
->Set the next property on the new node to be 
  the previous next

SingleLinkedList.js

Removed pseudocode:- ()
*********************
->


Reverse pseudocode:- ()
*************************
->
